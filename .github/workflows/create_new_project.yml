name: Create New Project

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Nazwa nowego repozytorium"
        required: true # Wymaga wprowadzenia nazwy
        default: "my-new-repo" # Domyślna nazwa repozytorium (opcjonalne)

jobs:
  create-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Konfiguracja użytkownika Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Weryfikacja użytkownika
        run: |
          ALLOWED_USER="aleksanderjedynak"
          if [ "${{ github.actor }}" != "$ALLOWED_USER" ]; then
            echo "Error: Workflow może być uruchamiany tylko przez $ALLOWED_USER."
            exit 1
          fi

      - name: Sprawdzenie uprawnień PERSONAL_ACCESS_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          response=$(curl -o /dev/null -s -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/)
          if [ "$response" -ne 200 ]; then
            echo "Error: Nie można uwierzytelnić za pomocą PERSONAL_ACCESS_TOKEN."
            exit 1
          fi

#      - name: Test uprawnień do tworzenia repozytoriów
#        env:
#          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        run: |
#          response=$(curl -s -o response.json -w "%{http_code}" \
#            -H "Authorization: token $GITHUB_TOKEN" \
#            -d '{"name":"test-repo"}' \
#            https://api.github.com/user/repos)
#          if [ "$response" -ne 201 ]; then
#            echo "Error: Token nie ma uprawnień do tworzenia repozytoriów. Szczegóły:"
#            echo "Status odpowiedzi: $response"
#            echo "Szczegóły błędu:"
#            cat response.json
#            exit 1
#          else
#            echo "Token ma uprawnienia do tworzenia repozytoriów."
#          fi
#
#      - name: Usuwanie testowego repozytorium (jeśli istnieje)
#        env:
#          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        run: |
#          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
#            https://api.github.com/repos/${{ github.actor }}/test-repo || echo "Testowe repozytorium nie istnieje."

      - name: Konfiguracja uwierzytelnienia Gita
        run: |
          git config --global url."https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Walidacja nazwy repozytorium
        run: |
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          if ! [[ "$REPO_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "Error: Nazwa repozytorium może zawierać tylko litery, cyfry, myślniki i podkreślenia."
            exit 1
          fi
          echo "Nazwa repozytorium '$REPO_NAME' jest poprawna."

      - name: Klonowanie bazowego repozytorium
        run: |
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          git clone https://github.com/${{ github.actor }}/basic.git "$REPO_NAME" || {
            echo "Error: Nie udało się sklonować bazowego repozytorium."
            exit 1
          }
          cd "$REPO_NAME"
          rm -rf .git
          git init
          git add .
          git commit -m "Initial commit from basic repository by ${{ github.actor }}"

      - name: Tworzenie repozytorium na GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          REPO_NAME: ${{ github.event.inputs.repo_name }}
        run: |
          response=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"name\":\"$REPO_NAME\"}" \
            https://api.github.com/user/repos)
          if [ "$response" -ne 201 ]; then
            echo "Error: Nie udało się utworzyć repozytorium na GitHub. Szczegóły:"
            echo "Status odpowiedzi: $response"
            echo "Szczegóły błędu:"
            cat response.json
            exit 1
          else
            echo "Repozytorium '$REPO_NAME' zostało pomyślnie utworzone."
          fi


      - name: Push do nowego repozytorium
        run: |
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          cd "$REPO_NAME"
          git remote add origin https://github.com/${{ github.actor }}/"$REPO_NAME".git
          git branch -M main
          git push -u origin main
